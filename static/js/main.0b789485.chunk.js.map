{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","services/todoId.ts","api/users.ts","services/user.ts","services/title.ts","components/Form/Form.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","title","completed","classnames","TodoList","todos","map","getMaxId","todosIds","Math","max","username","getUserById","userId","usersFromServer","find","getValidTitle","match","join","Form","initialTodos","setTodos","useState","setUserId","setTitle","hasTitleError","setHasTitleError","hasUserIdError","setHasUserIdError","action","method","onSubmit","event","preventDefault","newTodo","prevTodos","htmlFor","type","placeholder","value","onChange","target","required","disabled","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b789485.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a\n      className=\"UserInfo\"\n      href={`mailto:${user.email}`}\n    >\n      {user.name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classnames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classnames('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          data-id={todo.id}\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </section>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport const getMaxId = (todos: Todo[]) => {\n  const todosIds = todos.map(todo => todo.id);\n\n  return Math.max(...todosIds);\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import usersFromServer from '../api/users';\n\nexport const getUserById = (userId: number) => {\n  return usersFromServer.find(user => user.id === userId);\n};\n","export const getValidTitle = (title: string) => {\n  const allowedSymbols = /[а-яА-Яa-zA-Z0-9\\s]/g;\n  const validTitle = title.match(allowedSymbols)?.join('') || '';\n\n  return validTitle;\n};\n","import React, { useState } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { getMaxId } from '../../services/todoId';\nimport { getUserById } from '../../services/user';\nimport { getValidTitle } from '../../services/title';\nimport usersFromServer from '../../api/users';\n\ntype TodoFormProps = {\n  initialTodos: Todo[];\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>;\n};\n\nexport const Form: React.FC<TodoFormProps> = ({ initialTodos, setTodos }) => {\n  const [userId, setUserId] = useState(0);\n  const [title, setTitle] = useState('');\n\n  const [hasTitleError, setHasTitleError] = useState(false);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setHasTitleError(false);\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setHasUserIdError(false);\n  };\n\n  const resetForm = () => {\n    setUserId(0);\n    setTitle('');\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!title && !userId) {\n      setHasUserIdError(true);\n      setHasTitleError(true);\n\n      return;\n    }\n\n    if (!title) {\n      setHasTitleError(true);\n\n      return;\n    }\n\n    if (!userId) {\n      setHasUserIdError(true);\n\n      return;\n    }\n\n    const newTodo: Todo = {\n      id: getMaxId(initialTodos) + 1,\n      title: getValidTitle(title),\n      completed: false,\n      userId,\n      user: getUserById(userId),\n    };\n\n    setTodos((prevTodos: Todo[]) => [...prevTodos, newTodo]);\n    resetForm();\n  };\n\n  return (\n    <div className=\"App\">\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title:&nbsp;</label>\n          <input\n            id=\"title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleTitleChange}\n          />\n          {hasTitleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user-id\">User:&nbsp;</label>\n\n          <select\n            id=\"user-id\"\n            data-cy=\"userSelect\"\n            required\n            value={userId}\n            onChange={handleUserChange}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {usersFromServer.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {hasUserIdError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\n// import usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/Todo';\nimport { Form } from './components/Form/Form';\nimport { getUserById } from './services/user';\n\nconst initialTodos: Todo[] = todosFromServer.map((todo) => {\n  const user = getUserById(todo.userId);\n\n  return {\n    ...todo,\n    user,\n  };\n});\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState(initialTodos);\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <Form initialTodos={todos} setTodos={setTodos} />\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}